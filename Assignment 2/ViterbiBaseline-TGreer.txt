import re
from collections import Counter
import sys

word_tag, tag_uni, tag_tag, prob_dict, full_test = {}, {}, {}, {}, {}
tag_only = []
text = ' '

def probabilties(dictionary):
    element1, element2 = " ", " "
    for key in dictionary:
        element1, element2 = key[0], key[1]
        prob_dict[key] = find_vals(element1, element2, dictionary) / find_vals(element2, '', tag_uni)


def find_vals(word1, word2, dictionary): #use laplace smoothing, not working
    if word1 != '' and word2 != '': #bigram search
        for keys in dictionary:
            if keys[0] == word1 and keys[1] == word2:
                # print("inside if inside for and if: keys[{}] == {} and keys[{}] == {} -> {} value ={}".format(keys[0], word1, keys[1], word2, keys[0] == word1 and keys[1] == word2, dictionary.get(keys)))
                return dictionary.get(keys)
            else:
                # print("inside else inside for and if\t keys[{}] == {} and keys[{}] == {} -> {}".format(keys[0], word1, keys[1], word2, keys[0] == word1 and keys[1] == word2))
                return 1

    elif word1 != '' and word2 == '': #unigram search, assume word1 will be searched word
        for keys in dictionary:
            # print(keys)
            if keys == word1:
                # print("inside if inside for and elif\t keys[{}] == {} -> {} value ={}".format(keys, word1, keys == word1, dictionary.get(keys)))
                return dictionary.get(keys)
            else:
                # print("inside else inside for and elif\t keys[{}] == {} -> {}".format(keys, word1, keys == word1))
                return -1


def viterbi(v_text):
    max_prob = 0.0
    predict_tag = " "
    global tag_uni, full_test
    tot_tags = len(tag_uni)
    for a in range(len(v_text)): #rows
        index = v_text[a].find(".") #won't account for periods in acronyms
        line = v_text[a][0:index]

        for key in tag_uni: #columns
            if a== 0: #beginning of sentence
                word_key = line[a] + tag_uni[key]
                tag_key = tag_uni[key] + '<s>'
                prob = prob_dict.get(word_key, 1) * prob_dict.get(tag_key, 1)
                if prob > max_prob:
                    max_prob = prob
                    predict_tag = tag_uni[key]
            else:
                word_key = line[a] + tot_tags[a]
                prob = prob_dict.get(word_key, 1) * max_prob
                if prob > max_prob:
                    max_prob = prob
                    predict_tag = tag_uni[key]
        #full_test[v_text[]]
        if a == index: #eos
            a = index


def accuracy():
    global full_test
    wrong, right, total = 0, 0, 0
    for a in range(len(full_test)):
        if full_test[a][1] == full_test[a][2]: #correct tagging
            right +=1
            total += 1
        elif full_test[a][1] != full_test[a][2]:
            wrong += 1
            total += 1
    print("Accuracy of Viterbi: wrong tags = {} right tags = {} total = {} accuracy = {}%".format(wrong, right, total, (right / total)* 100))


def strip_tags(actual_line):
    test_line = [' ', ' ']
    for a in range(len(actual_line)):
        index = actual_line[a].find("/")

        if index > 0:
            global text
            text += actual_line[a][0:index]
            word = actual_line[a][0:index]
            test_line[0] = 'predicted tag'
            test_line[1] = 'actual'

        global full_test
        full_test[word]=(test_line)


def preprocess(line_list):
    line_list.insert(0, '<s>')
    for a in range(len(line_list)):
        back_slash = re.findall(r'\\/', line_list[a])
        forward_slash = re.findall(r'/', line_list[a])

        # deal with tag phrases
        if len(back_slash) == 1 and len(forward_slash) == 2: line_list[a] = line_list[a].replace('\\/', ' ', 1)

        elif len(back_slash) == 1: line_list[a] = line_list[a].replace('\\/', '/')


def dict_vals(dict_line):
    for a in range(len(dict_line)):
        temp_line = dict_line[a].split("/") # assume that / is always in line

        if len(temp_line) == 1: # account for beginning of sentence <s> being by itself
            #tag unigram
            if temp_line[0] in tag_uni: tag_uni[temp_line[0]] += 1
            else: tag_uni[temp_line[0]] = 1
            global tag_only
            tag_only.append(temp_line[0])

        elif len(temp_line) == 2:
            if temp_line[1] in tag_uni: tag_uni[temp_line[1]] += 1 # tag unigram
            else: tag_uni[temp_line[1]] = 1

            if tuple(temp_line) in word_tag: word_tag[tuple(temp_line)] += 1 # word and tag bigram
            else: word_tag[tuple(temp_line)] = 1

            #make a string of only tags then make bigram of it
            tag_only.append(temp_line[1])


while len(sys.argv) > 1:  # so long as arguments include files to open
    for a in range(1, len(sys.argv)):
        file = open(sys.argv[a])

        if a == 1: #train
            for line in file:  # preprocessing of file
                line = line.split()
                preprocess(line)
                dict_vals(line)
            probabilties(word_tag)
            probabilties(tag_tag)
            tag_tag = Counter(zip(tag_only, tag_only[1:]))


        elif a == 2: #test
            for line in file:  # preprocessing of file
                line = line.split()
                preprocess(line)
                strip_tags(line)
            viterbi(text)

    print("word_tag =\n{} \ntag_uni=\n{} \ntag_tag=\n{}".format(word_tag, tag_uni, tag_tag))
    # print("prob_dict =\n{}".format(prob_dict))
    break

import re
from collections import Counter
from gettext import find
import sys

tag_freq = {}

def tag_max(dictionary):
    for key, value in dictionary.items():
        if(len(value) > 1):
            print(key, '->', value)
    return 0

def dict_vals(dict_line):
    temp_list = []
    for a in range(len(dict_line)):
        temp_line = dict_line[a].split("/") # assume that / is always in line [word, tag]

        if temp_line[0] in tag_freq:
            if tag_freq[temp_line[0]]:
                tag_freq[temp_line[0]][1] += 1
            else:

        else:
            tag_freq[temp_line[0]] = [temp_line[1], 1]
        temp_list.clear()

def preprocess(line):
    unwanted = ('!', '?', '\%', ',', '(', ')', '&', '$', '')
    for a in range(len(line)):
        for u in unwanted: line[a] = line[a].replace(u, '')
        back_slash = re.findall(r'\\/', line[a])
        forward_slash = re.findall(r'/', line[a])

        if len(back_slash) == 1 and len(forward_slash) == 2: # deal with tag phrases
            line[a] = line[a].replace('\\/', ' ', 1)

        elif len(back_slash) == 1:
            line[a] = line[a].replace('\\/', '/')
    return (line)


while len(sys.argv) > 1:  # so long as arguments include files to open
    for a in range(1, len(sys.argv)):
        file = open(sys.argv[a])
        for line in file:
            line = line.split()
            line = preprocess(line)
            dict_vals(line)
            tag_max(tag_freq)
    # print(tag_freq)

    break