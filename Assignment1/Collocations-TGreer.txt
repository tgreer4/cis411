{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red183\green111\blue179;
\red202\green202\blue202;\red67\green192\blue160;\red212\green214\blue154;\red70\green137\blue204;\red140\green211\blue254;
\red167\green197\blue152;\red89\green138\blue67;\red194\green126\blue101;\red205\green173\blue106;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgray\c0\c0;\cssrgb\c77255\c52549\c75294;
\cssrgb\c83137\c83137\c83137;\cssrgb\c30588\c78824\c69020;\cssrgb\c86275\c86275\c66667;\cssrgb\c33725\c61176\c83922;\cssrgb\c61176\c86275\c99608;
\cssrgb\c70980\c80784\c65882;\cssrgb\c41569\c60000\c33333;\cssrgb\c80784\c56863\c47059;\cssrgb\c84314\c72941\c49020;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 from\strokec5  \strokec6 cmath\strokec5  \strokec4 import\strokec5  \strokec7 sqrt\strokec5 \
\strokec4 from\strokec5  \strokec6 gettext\strokec5  \strokec4 import\strokec5  \strokec7 find\strokec5 \
\strokec4 from\strokec5  \strokec6 collections\strokec5  \strokec4 import\strokec5  \strokec6 Counter\strokec5 \
\strokec4 import\strokec5  \strokec6 math\strokec5 \
\strokec4 import\strokec5  \strokec6 re\strokec5 \
\strokec4 import\strokec5  \strokec6 sys\strokec5 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec8 def\strokec5  \strokec7 chi_square\strokec5 (\strokec9 bigram\strokec5 ):\
    \strokec8 global\strokec5  \strokec9 sum_bigram_vals\strokec5 \
    \strokec9 final_bigram\strokec5  = \{\}\
    \strokec4 for\strokec5  \strokec9 key\strokec5 , \strokec9 val\strokec5  \strokec4 in\strokec5  \strokec9 bigram\strokec5 .items():\
        \strokec9 both_words\strokec5  = \strokec9 bigram\strokec5 [\strokec9 key\strokec5 ]\
        \strokec9 sum_not1\strokec5  = \strokec9 both_words\strokec5  + \strokec7 search_first\strokec5 (\strokec9 key\strokec5 [\strokec10 0\strokec5 ], \strokec9 key\strokec5 [\strokec10 1\strokec5 ])\
        \strokec9 sum_not2\strokec5  = \strokec7 search_second\strokec5 (\strokec9 key\strokec5 [\strokec10 0\strokec5 ], \strokec9 key\strokec5 [\strokec10 1\strokec5 ])\
        \strokec9 neither_words\strokec5  = \strokec9 sum_bigram_vals\strokec5  -(\strokec9 both_words\strokec5  + \strokec9 sum_not1\strokec5  + \strokec9 sum_not2\strokec5 )\
\
        \strokec4 for\strokec5  \strokec9 a\strokec5  \strokec4 in\strokec5  \strokec6 range\strokec5 (\strokec10 4\strokec5 ):\
            \strokec9 sum\strokec5  = \strokec10 0\strokec5 \
            \strokec9 temp_sum\strokec5  = \strokec10 0\strokec5 \
            \strokec11 #1-> (1,1) 2-> (1,2)  3-> (2,1) 4-> (2,2) \strokec5 \
            \strokec4 if\strokec5 (\strokec9 a\strokec5  == \strokec10 1\strokec5 ): \strokec11 #p(w1)p(w2)\strokec5 \
                \strokec9 observed\strokec5  = \strokec9 both_words\strokec5 \
                \strokec9 expected\strokec5  = (((\strokec9 both_words\strokec5  + \strokec9 sum_not2\strokec5 )/\strokec9 sum_bigram_vals\strokec5 )*((\strokec9 both_words\strokec5  + \strokec9 sum_not1\strokec5 )/\strokec9 sum_bigram_vals\strokec5 ))* \strokec9 sum_bigram_vals\strokec5 \
                \strokec9 sum\strokec5  += \strokec9 temp_sum\strokec5 \
\
            \strokec4 elif\strokec5 (\strokec9 a\strokec5  == \strokec10 2\strokec5 ): \strokec11 #e = p(w1)p(!w2)\strokec5 \
                \strokec9 observed\strokec5  = \strokec9 sum_not2\strokec5 \
                \strokec9 expected\strokec5  = (((\strokec9 both_words\strokec5  + \strokec9 sum_not2\strokec5 )/\strokec9 sum_bigram_vals\strokec5 )*((\strokec9 sum_not2\strokec5  + \strokec9 neither_words\strokec5 )/\strokec9 sum_bigram_vals\strokec5 ))* \strokec9 sum_bigram_vals\strokec5 \
                \strokec9 temp_sum\strokec5  = (\strokec7 pow\strokec5 ((\strokec9 observed\strokec5  - \strokec9 expected\strokec5 ),\strokec10 2\strokec5 )) / \strokec9 expected\strokec5 \
                \strokec9 sum\strokec5  += \strokec9 temp_sum\strokec5 \
\
            \strokec4 elif\strokec5 (\strokec9 a\strokec5  == \strokec10 3\strokec5 ): \strokec11 #p(!w1)p(w2)\strokec5 \
                \strokec9 observed\strokec5  = \strokec9 sum_not1\strokec5 \
                \strokec9 expected\strokec5  = (((\strokec9 sum_not1\strokec5  + \strokec9 neither_words\strokec5 )/\strokec9 sum_bigram_vals\strokec5 )*((\strokec9 both_words\strokec5  + \strokec9 sum_not1\strokec5 )/\strokec9 sum_bigram_vals\strokec5 ))* \strokec9 sum_bigram_vals\strokec5 \
                \strokec9 temp_sum\strokec5  = (\strokec7 pow\strokec5 ((\strokec9 observed\strokec5  - \strokec9 expected\strokec5 ),\strokec10 2\strokec5 )) / \strokec9 expected\strokec5 \
                \strokec9 sum\strokec5  += \strokec9 temp_sum\strokec5 \
            \
            \strokec4 elif\strokec5 (\strokec9 a\strokec5  == \strokec10 4\strokec5 ): \strokec11 #p(!w1)p(!w2)\strokec5 \
                \strokec9 observed\strokec5  = \strokec9 neither_words\strokec5 \
                \strokec9 expected\strokec5  = (((\strokec9 sum_not1\strokec5  + \strokec9 neither_words\strokec5 )/\strokec9 sum_bigram_vals\strokec5 )*((\strokec9 sum_not2\strokec5  + \strokec9 neither_words\strokec5 )/\strokec9 sum_bigram_vals\strokec5 ))* \strokec9 sum_bigram_vals\strokec5 \
                \strokec9 temp_sum\strokec5  = (\strokec7 pow\strokec5 ((\strokec9 observed\strokec5  - \strokec9 expected\strokec5 ),\strokec10 2\strokec5 )) / \strokec9 expected\strokec5 \
                \strokec9 sum\strokec5  += \strokec9 temp_sum\strokec5 \
        \strokec9 x\strokec5 =\strokec7 sqrt\strokec5 (\strokec9 sum\strokec5 )\
        \strokec9 final_bigram\strokec5 [\strokec9 key\strokec5 ] = \strokec9 x\strokec5 \
    \strokec4 return\strokec9 (final_bigram)\strokec5 \
\
\strokec8 def\strokec5  \strokec7 search_first\strokec5 (\strokec9 word1\strokec5 , \strokec9 word2\strokec5 ): \strokec11 #search is concentrated on w1!= new \strokec5 \
    \strokec8 global\strokec5  \strokec9 bigram\strokec5 \
    \strokec9 sum\strokec5  = \strokec10 0\strokec5 \
    \strokec4 for\strokec5  \strokec9 key\strokec5 , \strokec9 val\strokec5  \strokec4 in\strokec5  \strokec9 bigram\strokec5 .\strokec7 items\strokec5 ():\
        \strokec4 if\strokec5 (\strokec9 key\strokec5 [\strokec10 0\strokec5 ] != \strokec9 word1\strokec5  \strokec8 and\strokec5  \strokec9 key\strokec5 [\strokec10 1\strokec5 ]== \strokec9 word2\strokec5 ): \strokec9 sum\strokec5 += \strokec9 bigram\strokec5 [\strokec9 key\strokec5 ]\
    \strokec4 return\strokec9 (sum)\strokec5 \
\
\strokec8 def\strokec5  \strokec7 search_second\strokec5 (\strokec9 word1\strokec5 , \strokec9 word2\strokec5 ): \strokec11 #search is concentrated on w2!= companies\strokec5 \
    \strokec8 global\strokec5  \strokec9 bigram\strokec5 \
    \strokec9 sum\strokec5  = \strokec10 0\strokec5 \
\
    \strokec4 for\strokec5  \strokec9 key\strokec5 , \strokec9 val\strokec5  \strokec4 in\strokec5  \strokec9 bigram\strokec5 .\strokec7 items\strokec5 (): \
        \strokec4 if\strokec5 (\strokec9 key\strokec5 [\strokec10 0\strokec5 ] == \strokec9 word1\strokec5  \strokec8 and\strokec5  \strokec9 key\strokec5 [\strokec10 1\strokec5 ] != \strokec9 word2\strokec5 ): \strokec9 sum\strokec5 += \strokec9 bigram\strokec5 [\strokec9 key\strokec5 ]\
    \strokec4 return\strokec5  \strokec9 (sum)\strokec5 \
\
\strokec8 def\strokec5  \strokec7 pmi\strokec5 (\strokec9 bigram\strokec5 ):\
    \strokec9 final_bigram\strokec5  = \{\}\
    \strokec9 word_prob\strokec5  = \strokec6 float\strokec5 (\strokec10 1\strokec5 )\
\
    \strokec4 for\strokec5  \strokec9 key\strokec5 , \strokec9 val\strokec5  \strokec4 in\strokec5  \strokec9 bigram\strokec5 .items():\
        \strokec9 observed\strokec5  = \strokec9 bigram\strokec5 [\strokec9 key\strokec5 ] / \strokec9 sum_bigram_vals\strokec5  \strokec11 #numerator\strokec5 \
        \strokec4 for\strokec5  \strokec9 i\strokec5  \strokec4 in\strokec5  \strokec9 key\strokec5 : \strokec11 #2 keys\strokec5 \
            \strokec9 word_prob\strokec5  =  \strokec9 word_prob\strokec5  * ((\strokec7 find_uni_val\strokec5 (\strokec9 i\strokec5 )) / \strokec9 sum_unigram_vals\strokec5 ) \strokec11 #denominator\strokec5 \
        \strokec9 word_prob\strokec5  =  \strokec9 observed\strokec5  / \strokec9 word_prob\strokec5 \
        \
        \strokec9 score\strokec5  = \strokec6 math\strokec5 .\strokec7 log2\strokec5 (\strokec9 word_prob\strokec5 )\
        \strokec9 final_bigram\strokec5 [\strokec9 key\strokec5 ] = \strokec9 score\strokec5 \
        \strokec9 word_prob\strokec5  = \strokec10 1.0\strokec5 \
    \strokec4 return\strokec9 (final_bigram)\strokec5 \
\
\strokec8 def\strokec5  \strokec7 printBi\strokec5 (\strokec9 bigram\strokec5 ):\
    \strokec4 for\strokec5  \strokec9 key\strokec5 , \strokec9 val\strokec5  \strokec4 in\strokec5  \strokec9 bigram\strokec5 .items():\
        \strokec7 print\strokec5 (\strokec12 "Bigram: "\strokec5 ,\strokec9 key\strokec5 , \strokec12 "\strokec13 \\t\\t\strokec12 Score: "\strokec5 , \strokec9 val\strokec5 )\
\
\strokec8 def\strokec5  \strokec7 find_uni_val\strokec5 (\strokec9 word\strokec5 ):\
    \strokec8 global\strokec5  \strokec9 unigram\strokec5 \
    \strokec4 if\strokec5 (\strokec7 isinstance\strokec5 (\strokec9 word\strokec5 , \strokec6 str\strokec5 )): \strokec9 word\strokec5  = \strokec9 word\strokec5 .\strokec7 lower\strokec5 ()\
\
    \strokec4 if\strokec5 (\strokec9 word\strokec5  \strokec8 in\strokec5  \strokec9 unigram\strokec5 ): \strokec4 return\strokec5 (\strokec9 unigram\strokec5 [\strokec9 word\strokec5 ])\
    \strokec4 else\strokec5 : \strokec4 return\strokec5 (\strokec10 0\strokec5 )\
\
\strokec8 def\strokec5  \strokec7 uni_count\strokec5 (\strokec9 line\strokec5 ):\
    \strokec4 for\strokec5  \strokec9 word\strokec5  \strokec4 in\strokec5  \strokec9 line\strokec5 :\
        \strokec4 if\strokec5 (\strokec9 word\strokec5 .lower() \strokec8 in\strokec5  \strokec9 unigram\strokec5 ): \strokec9 unigram\strokec5 [\strokec9 word\strokec5 .lower()] += \strokec10 1\strokec5 \
        \strokec4 else\strokec5 : \strokec9 unigram\strokec5 [\strokec9 word\strokec5 .lower()] = \strokec10 1\strokec5 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec9 method\strokec5  = \strokec6 str\strokec5 (\strokec6 sys\strokec5 .\strokec9 argv\strokec5 [-\strokec10 1\strokec5 ]).\strokec7 lower\strokec5 () \strokec11 #assuming args will be in correct order\strokec5 \
\strokec9 unigram\strokec5  =\{\}\
\strokec9 bigram\strokec5  = \{\}\
\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec4 with\strokec5  \strokec7 open\strokec5 (\strokec6 sys\strokec5 .\strokec9 argv\strokec5 [\strokec10 1\strokec5 ], \strokec12 'r'\strokec5 ) \strokec4 as\strokec5  \strokec9 file\strokec5 :\
    \strokec9 line\strokec5  = \strokec6 re\strokec5 .\strokec7 findall\strokec5 (\strokec12 '\\w+'\strokec5 , \strokec9 file\strokec5 .\strokec7 read\strokec5 ())\
    \strokec7 uni_count\strokec5 (\strokec9 line\strokec5 )\
\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec9 bigram\strokec5  = \strokec6 Counter\strokec5 (\strokec6 zip\strokec5 (\strokec9 line\strokec5 ,\strokec9 line\strokec5 [\strokec10 1\strokec5 :]))\
\strokec9 sum_unigram_vals\strokec5  = \strokec7 sum\strokec5 (\strokec9 unigram\strokec5 .\strokec7 values\strokec5 ())\
\strokec9 sum_bigram_vals\strokec5  = \strokec7 sum\strokec5 (\strokec9 bigram\strokec5 .\strokec7 values\strokec5 ())\
\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec4 if\strokec5 (\strokec9 method\strokec5 .\strokec7 find\strokec5 (\strokec12 "c"\strokec5 )>-\strokec10 1\strokec5 ): \
    \strokec9 final_bigram\strokec5  = \strokec7 chi_square\strokec5 (\strokec9 bigram\strokec5 )\
    \strokec7 print\strokec5 (\strokec12 "Chi-Squared: \strokec13 \\n\strokec12 "\strokec5 )\
    \strokec7 printBi\strokec5 (\strokec9 final_bigram\strokec5 )\
\
\strokec4 elif\strokec5 (\strokec9 method\strokec5 .\strokec7 find\strokec5 (\strokec12 "p"\strokec5 )>-\strokec10 1\strokec5 ): \
    \strokec9 final_bigram\strokec5  = \strokec7 pmi\strokec5 (\strokec9 bigram\strokec5 )\
    \strokec7 print\strokec5 (\strokec12 "PMI: \strokec13 \\n\strokec12 "\strokec5 )\
    \strokec7 printBi\strokec5 (\strokec9 final_bigram\strokec5 )\
\
}